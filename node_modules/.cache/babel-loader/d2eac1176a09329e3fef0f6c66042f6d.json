{"ast":null,"code":"import _slicedToArray from \"/Users/dpalomanes/IdeaProjects/apiagencies/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/dpalomanes/IdeaProjects/apiagencies/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/dpalomanes/IdeaProjects/apiagencies/client/src/table.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\nimport createRowData from \"./createRowData\";\nimport { Data } from \"react-data-grid-addons\";\nimport \"./styles.css\";\nconst defaultColumnProperties = {\n  width: 160\n};\nconst columns = [{\n  key: \"id\",\n  name: \"ID\"\n}, {\n  key: \"firstName\",\n  name: \"First Name\"\n}, {\n  key: \"lastName\",\n  name: \"Last Name\"\n}, {\n  key: \"jobTitle\",\n  name: \"Job Title\"\n}, {\n  key: \"jobArea\",\n  name: \"Job Area\"\n}, {\n  key: \"jobType\",\n  name: \"Job Type\"\n}, {\n  key: \"email\",\n  name: \"Email\"\n}, {\n  key: \"street\",\n  name: \"Street\"\n}, {\n  key: \"zipCode\",\n  name: \"ZipCode\"\n}, {\n  key: \"date\",\n  name: \"Date\"\n}, {\n  key: \"catchPhrase\",\n  name: \"Catch Phrase\"\n}].map(c => _objectSpread({}, c, defaultColumnProperties));\nconst ROW_COUNT = 50;\nconst groupBy = [\"jobType\"];\n\nconst getSubRowDetails = expandedRows => rowItem => {\n  const isExpanded = expandedRows[rowItem.id] ? expandedRows[rowItem.id] : false;\n  return {\n    group: rowItem.teamMembers && rowItem.teamMembers.length > 0,\n    expanded: isExpanded,\n    children: rowItem.teamMembers,\n    field: \"firstName\",\n    treeDepth: rowItem.treeDepth || 0,\n    siblingIndex: rowItem.siblingIndex,\n    numberSiblings: rowItem.numberSiblings\n  };\n};\n\nfunction updateSubRowDetails(subRows, parentTreeDepth) {\n  const treeDepth = parentTreeDepth || 0;\n  subRows.forEach((sr, i) => {\n    sr.treeDepth = treeDepth + 1;\n    sr.siblingIndex = i;\n    sr.numberSiblings = subRows.length;\n  });\n}\n\nconst onCellExpand = args => ({\n  rows,\n  expandedRows\n}) => {\n  const rowKey = args.rowData.id;\n  const rowIndex = rows.indexOf(args.rowData);\n  const subRows = args.expandArgs.children;\n\n  if (expandedRows && !expandedRows[rowKey]) {\n    expandedRows[rowKey] = true;\n    updateSubRowDetails(subRows, args.rowData.treeDepth);\n    rows.splice(rowIndex + 1, 0, ...subRows);\n  } else if (expandedRows[rowKey]) {\n    expandedRows[rowKey] = false;\n    rows.splice(rowIndex + 1, subRows.length);\n  }\n\n  return {\n    expandedRows,\n    rows\n  };\n};\n\nfunction Example({\n  rows\n}) {\n  const _useState = useState({\n    expandedRows: {},\n    rows\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n  const visibleRows = Data.Selectors.getRows(state);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(ReactDataGrid, {\n    columns: columns,\n    rowGetter: i => visibleRows[i],\n    rowsCount: visibleRows.length,\n    minHeight: 550,\n    getSubRowDetails: getSubRowDetails(state.expandedRows),\n    onCellExpand: args => setState(onCellExpand(args)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }));\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(Example, {\n  rows: createRowData(ROW_COUNT),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 124\n  },\n  __self: this\n}), rootElement);\nexport default rootElement;","map":{"version":3,"sources":["/Users/dpalomanes/IdeaProjects/apiagencies/client/src/table.js"],"names":["React","useState","ReactDOM","ReactDataGrid","createRowData","Data","defaultColumnProperties","width","columns","key","name","map","c","ROW_COUNT","groupBy","getSubRowDetails","expandedRows","rowItem","isExpanded","id","group","teamMembers","length","expanded","children","field","treeDepth","siblingIndex","numberSiblings","updateSubRowDetails","subRows","parentTreeDepth","forEach","sr","i","onCellExpand","args","rows","rowKey","rowData","rowIndex","indexOf","expandArgs","splice","Example","state","setState","visibleRows","Selectors","getRows","rootElement","document","getElementById","render"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,IAAT,QAAqB,wBAArB;AAEA,OAAO,cAAP;AAEA,MAAMC,uBAAuB,GAAG;AAC5BC,EAAAA,KAAK,EAAE;AADqB,CAAhC;AAIA,MAAMC,OAAO,GAAG,CACZ;AACIC,EAAAA,GAAG,EAAE,IADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CADY,EAKZ;AACID,EAAAA,GAAG,EAAE,WADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CALY,EASZ;AACID,EAAAA,GAAG,EAAE,UADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CATY,EAaZ;AACID,EAAAA,GAAG,EAAE,UADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CAbY,EAiBZ;AACID,EAAAA,GAAG,EAAE,SADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CAjBY,EAqBZ;AACID,EAAAA,GAAG,EAAE,SADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CArBY,EAyBZ;AACID,EAAAA,GAAG,EAAE,OADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CAzBY,EA6BZ;AACID,EAAAA,GAAG,EAAE,QADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CA7BY,EAiCZ;AACID,EAAAA,GAAG,EAAE,SADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CAjCY,EAqCZ;AACID,EAAAA,GAAG,EAAE,MADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CArCY,EAyCZ;AACID,EAAAA,GAAG,EAAE,aADT;AAEIC,EAAAA,IAAI,EAAE;AAFV,CAzCY,EA6CdC,GA7Cc,CA6CVC,CAAC,sBAAUA,CAAV,EAAgBN,uBAAhB,CA7CS,CAAhB;AA+CA,MAAMO,SAAS,GAAG,EAAlB;AAEA,MAAMC,OAAO,GAAG,CAAC,SAAD,CAAhB;;AAEA,MAAMC,gBAAgB,GAAGC,YAAY,IAAIC,OAAO,IAAI;AAChD,QAAMC,UAAU,GAAGF,YAAY,CAACC,OAAO,CAACE,EAAT,CAAZ,GACbH,YAAY,CAACC,OAAO,CAACE,EAAT,CADC,GAEb,KAFN;AAGA,SAAO;AACHC,IAAAA,KAAK,EAAEH,OAAO,CAACI,WAAR,IAAuBJ,OAAO,CAACI,WAAR,CAAoBC,MAApB,GAA6B,CADxD;AAEHC,IAAAA,QAAQ,EAAEL,UAFP;AAGHM,IAAAA,QAAQ,EAAEP,OAAO,CAACI,WAHf;AAIHI,IAAAA,KAAK,EAAE,WAJJ;AAKHC,IAAAA,SAAS,EAAET,OAAO,CAACS,SAAR,IAAqB,CAL7B;AAMHC,IAAAA,YAAY,EAAEV,OAAO,CAACU,YANnB;AAOHC,IAAAA,cAAc,EAAEX,OAAO,CAACW;AAPrB,GAAP;AASH,CAbD;;AAeA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,eAAtC,EAAuD;AACnD,QAAML,SAAS,GAAGK,eAAe,IAAI,CAArC;AACAD,EAAAA,OAAO,CAACE,OAAR,CAAgB,CAACC,EAAD,EAAKC,CAAL,KAAW;AACvBD,IAAAA,EAAE,CAACP,SAAH,GAAeA,SAAS,GAAG,CAA3B;AACAO,IAAAA,EAAE,CAACN,YAAH,GAAkBO,CAAlB;AACAD,IAAAA,EAAE,CAACL,cAAH,GAAoBE,OAAO,CAACR,MAA5B;AACH,GAJD;AAKH;;AAED,MAAMa,YAAY,GAAGC,IAAI,IAAI,CAAC;AAAEC,EAAAA,IAAF;AAAQrB,EAAAA;AAAR,CAAD,KAA4B;AACrD,QAAMsB,MAAM,GAAGF,IAAI,CAACG,OAAL,CAAapB,EAA5B;AACA,QAAMqB,QAAQ,GAAGH,IAAI,CAACI,OAAL,CAAaL,IAAI,CAACG,OAAlB,CAAjB;AACA,QAAMT,OAAO,GAAGM,IAAI,CAACM,UAAL,CAAgBlB,QAAhC;;AACA,MAAIR,YAAY,IAAI,CAACA,YAAY,CAACsB,MAAD,CAAjC,EAA2C;AACvCtB,IAAAA,YAAY,CAACsB,MAAD,CAAZ,GAAuB,IAAvB;AACAT,IAAAA,mBAAmB,CAACC,OAAD,EAAUM,IAAI,CAACG,OAAL,CAAab,SAAvB,CAAnB;AACAW,IAAAA,IAAI,CAACM,MAAL,CAAYH,QAAQ,GAAG,CAAvB,EAA0B,CAA1B,EAA6B,GAAGV,OAAhC;AACH,GAJD,MAIO,IAAId,YAAY,CAACsB,MAAD,CAAhB,EAA0B;AAC7BtB,IAAAA,YAAY,CAACsB,MAAD,CAAZ,GAAuB,KAAvB;AACAD,IAAAA,IAAI,CAACM,MAAL,CAAYH,QAAQ,GAAG,CAAvB,EAA0BV,OAAO,CAACR,MAAlC;AACH;;AACD,SAAO;AAAEN,IAAAA,YAAF;AAAgBqB,IAAAA;AAAhB,GAAP;AACH,CAbD;;AAeA,SAASO,OAAT,CAAiB;AAAEP,EAAAA;AAAF,CAAjB,EAA2B;AAAA,oBACGpC,QAAQ,CAAC;AAAEe,IAAAA,YAAY,EAAE,EAAhB;AAAoBqB,IAAAA;AAApB,GAAD,CADX;AAAA;AAAA,QAChBQ,KADgB;AAAA,QACTC,QADS;;AAEvB,QAAMC,WAAW,GAAG1C,IAAI,CAAC2C,SAAL,CAAeC,OAAf,CAAuBJ,KAAvB,CAApB;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,aAAD;AACI,IAAA,OAAO,EAAErC,OADb;AAEI,IAAA,SAAS,EAAE0B,CAAC,IAAIa,WAAW,CAACb,CAAD,CAF/B;AAGI,IAAA,SAAS,EAAEa,WAAW,CAACzB,MAH3B;AAII,IAAA,SAAS,EAAE,GAJf;AAKI,IAAA,gBAAgB,EAAEP,gBAAgB,CAAC8B,KAAK,CAAC7B,YAAP,CALtC;AAMI,IAAA,YAAY,EAAEoB,IAAI,IAAIU,QAAQ,CAACX,YAAY,CAACC,IAAD,CAAb,CANlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAYH;;AAED,MAAMc,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AAIAlD,QAAQ,CAACmD,MAAT,CAAgB,oBAAC,OAAD;AAAS,EAAA,IAAI,EAAEjD,aAAa,CAACS,SAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA6DqC,WAA7D;AAEA,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\nimport createRowData from \"./createRowData\";\nimport { Data } from \"react-data-grid-addons\";\n\nimport \"./styles.css\";\n\nconst defaultColumnProperties = {\n    width: 160\n};\n\nconst columns = [\n    {\n        key: \"id\",\n        name: \"ID\"\n    },\n    {\n        key: \"firstName\",\n        name: \"First Name\"\n    },\n    {\n        key: \"lastName\",\n        name: \"Last Name\"\n    },\n    {\n        key: \"jobTitle\",\n        name: \"Job Title\"\n    },\n    {\n        key: \"jobArea\",\n        name: \"Job Area\"\n    },\n    {\n        key: \"jobType\",\n        name: \"Job Type\"\n    },\n    {\n        key: \"email\",\n        name: \"Email\"\n    },\n    {\n        key: \"street\",\n        name: \"Street\"\n    },\n    {\n        key: \"zipCode\",\n        name: \"ZipCode\"\n    },\n    {\n        key: \"date\",\n        name: \"Date\"\n    },\n    {\n        key: \"catchPhrase\",\n        name: \"Catch Phrase\"\n    }\n].map(c => ({ ...c, ...defaultColumnProperties }));\n\nconst ROW_COUNT = 50;\n\nconst groupBy = [\"jobType\"];\n\nconst getSubRowDetails = expandedRows => rowItem => {\n    const isExpanded = expandedRows[rowItem.id]\n        ? expandedRows[rowItem.id]\n        : false;\n    return {\n        group: rowItem.teamMembers && rowItem.teamMembers.length > 0,\n        expanded: isExpanded,\n        children: rowItem.teamMembers,\n        field: \"firstName\",\n        treeDepth: rowItem.treeDepth || 0,\n        siblingIndex: rowItem.siblingIndex,\n        numberSiblings: rowItem.numberSiblings\n    };\n};\n\nfunction updateSubRowDetails(subRows, parentTreeDepth) {\n    const treeDepth = parentTreeDepth || 0;\n    subRows.forEach((sr, i) => {\n        sr.treeDepth = treeDepth + 1;\n        sr.siblingIndex = i;\n        sr.numberSiblings = subRows.length;\n    });\n}\n\nconst onCellExpand = args => ({ rows, expandedRows }) => {\n    const rowKey = args.rowData.id;\n    const rowIndex = rows.indexOf(args.rowData);\n    const subRows = args.expandArgs.children;\n    if (expandedRows && !expandedRows[rowKey]) {\n        expandedRows[rowKey] = true;\n        updateSubRowDetails(subRows, args.rowData.treeDepth);\n        rows.splice(rowIndex + 1, 0, ...subRows);\n    } else if (expandedRows[rowKey]) {\n        expandedRows[rowKey] = false;\n        rows.splice(rowIndex + 1, subRows.length);\n    }\n    return { expandedRows, rows };\n};\n\nfunction Example({ rows }) {\n    const [state, setState] = useState({ expandedRows: {}, rows });\n    const visibleRows = Data.Selectors.getRows(state);\n    return (\n        <div>\n            <ReactDataGrid\n                columns={columns}\n                rowGetter={i => visibleRows[i]}\n                rowsCount={visibleRows.length}\n                minHeight={550}\n                getSubRowDetails={getSubRowDetails(state.expandedRows)}\n                onCellExpand={args => setState(onCellExpand(args))}\n            />\n        </div>\n    );\n}\n\nconst rootElement = document.getElementById(\"root\");\n\n\n\nReactDOM.render(<Example rows={createRowData(ROW_COUNT)} />, rootElement);\n\nexport default rootElement"]},"metadata":{},"sourceType":"module"}